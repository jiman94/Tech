brew cask install virtualbox
brew cask install virtualbox-extension-pack

centos7 download
http://mirror.navercorp.com/centos/7/isos/x86_64/
CentOS-7-x86_64-DVD-1908.iso

vm 생성후 설정
 
네트워크는 실습 상황에 맞게 설정

network 화성화

ip addr 실행하면 네트워크 enp0s3이 비활성화 되어 있다.

ifup enp0s3   실행후

ip addr 확인하면 ip를 확인 할 수 있다.

고정 IP 설정
/etc/sysconfig/network-scripts network 장치 확인 가능하다.
ifcfg-enp0s3 (실행 환경마다 다른 경우가 있음)
vi 으로 열어서 수정을 해야한다.

//수정
BOOTPROTO=static 

//추가 virtualbox 에 맞게 네트워크 설정을 잡자
IPADDR=10.0.2.7
NETMASK=255.255.255.0
GATEWAY=10.0.2.1
DNS1=168.126.63.1
DNS2=168.126.63.2
수정후

systemctl restart network 네트워크 장비를 restart 

3개의 VM에 호스트 이름 지정
//master vm
hostnamectl set-hostname master

//work node1
hostnamectl set-hostname node1

//work node2
hostnamectl set-hostname node2
 
sudo su -
 

Swap 은 메모리가 부족하거나 절전 모드에서 디스크의 일부 공간을 메모리처럼 사용하는 기능

Kubelet 이 정상 동작할 수 있도록 해당 기능을 swap 디바이스와 파일 모두 disable

swapoff -a
echo 0 > /proc/sys/vm/swappiness
sed -e '/swap/ s/^#*/#/' -i /etc/fstab
swapoff -a: paging 과 swap 기능을 끕니다.

/proc/sys/vm/swappiness: 커널 속성을 변경해 swap을 disable 합니다.

/etc/fastab: Swap을 하는 파일 시스템을 찾아 disable 합니다.

 각 노드의 통신을 원활하게 하기 위해 방화벽 기능을 해제

systemctl disable firewalld
systemctl stop firewalld
 

SELinux(Security-Enhanced Linux)는 리눅스 보안 모듈로 액세스 권한을 제어

쿠버네티스에서는 컨테이너가 호스트의 파일시스템에 접속할 수 있도록 해당 기능을 disable

setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
 

RHEL 과 CentOS 7에서 iptables 관련 이슈가 있어서 커널 매개변수를 다음과 같이 수정

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system
 

br_netfilter 모듈이 활성화되어 있어야 한다.

modprobe br_netfilter 명령어로 해당 모듈을 명시적으로 추가하고, lsmod | grep br_netfilter 명령어로 추가 여부를 확인할 수 있다.

modprobe br_netfilter
 

Docker 설치

yum install docker -y
systemctl start docker.service
 

Kubeadm, Kubelet , Kubectl 을 설치

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
EOF

yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable kubelet && systemctl start kubelet
 


master node 에서만 실행
컨트롤 구성 요소를 설치

kubeadm config images pull
 

마스터 노드를 초기화

kubeadm init
 

초기화 완료 하면 아래 와 같은 글이 나오며 중간에 있는 config 설정 하는부분을 실행 줘야 한다.

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:

  https://kubernetes.io/docs/concepts/cluster-administration/addons/

  kubeadm join 0.0.0.4:6443 
 

master node에 실행

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
 

work node 에서만 실행(master node에 join)
master 에 kubeadm init 실행후 나온 토큰키 를 등록

kubeadm join 

Pod network add-on 설치
Pod 은 실제로 여러 노드에 걸쳐 배포되는데, Pod 끼리는 하나의 네트워크에 있는 것처럼 통신할 수 있다. 
이를 오버레이 네트워크(Overlay Network)라고 한다.

CNI (Container Network Interface) 에는 여러 종류가 있는데, 그중에 Weave 를 이용

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
 
master 에서 node를 검색하면 3개가 나올것이다.

kubectl get nodes
